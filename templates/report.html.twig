{# templates/lucky_number.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <p>Welcome to my report page.</p>
<div class="wrapper">    
	<div class="report-sidebar">
		<ul>
		    <li><a href="#kmom01">Kmom01</a></li>
		    <li><a href="#kmom02">Kmom02</a></li>
		    <li><a href="#kmom03">Kmom03</a></li>
		    <li><a href="#kmom04">Kmom04</a></li>
		    <li><a href="#kmom05">Kmom05</a></li>
		    <li><a href="#kmom06">Kmom06</a></li>
		    <li><a href="#kmom10">Kmom10</a></li>
		</ul>
	</div>
	<div class="report-content">
	
		<h2 id = "kmom01">Kmom01</h2>
		{% apply markdown_to_html %}
### Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.
		
Väldigt begränsat. Jag visste bara det hade något göra med "class".

### Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?

PHPs modell för klasser och objekt liknar faktiskt den som är i andra programmeringsspråk, såsom python och java. Vissa begrepp bör man förstå för att kunna komma igång. En klass är typ en mall för att skapa objekt. Ett objekt är en instans av en klass. Medlemsvariabler som liknar variabler är egenskaper (properties) av en klass. Metoder som liknar funktioner är definerade för att utföra uppgifter.
		
### Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?
       
Först i Controller defineras router som används i sajten. Varje route kopplas till mall i templates-mappen med hjälp av TWIG. TWIG gör det möjligt att skapa mallar som används för att rendera sidorna. De flesta mallen är baserade på en grund-mall base.html.twig. Man kan skriva js och css/scss kod i assets-mappen med hjälp av Encore, och sedan kan de byggas automatiskt till css och js filer när man kör "npm run build" eller man kan köra "npm run watch" under tiden man skriver kod, då byggs filer automatiskt varje gång man sparar filerna.

### Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.

Jag tycker att Language Highlights, Coding Practice, och Templating, dessa tre delar är intressanta. Eftersom det är bara början av kursen och jag vet inte vad PHP kan göra och vilka förmåga PHP har, så det är lite svårt att säga vad jag vill veta om. Men jag är intresserad av databasen. Coding Practice i artikeln är bra lära mig för att komma igång med språket.

### Vilken är din TIL för detta kmom?

Eftersom jag tjuvbörjade tidigt att läsa kursmaterial och göra uppgifterna, är instruktionerna i kursmaterialer lite gamla/ouppdaterade, därför blev det mycket fel med dependencies när jag försökte installera Synfony. Jag fick lära mig ganska mycket medan jag felsökte problem och lösa problem. Jag fick lära mig grundstrukturen av webbsajten som byggs i Synfony.
	
        {% endapply %}
        
        
		<h2 id = "kmom02">Kmom02</h2>
		{% apply markdown_to_html %}
### Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.

En klass som ärver en annan klass kan ärva dess egenskaper och metoder så att mycket kod kan återanvändas, dessutom skapar en relation mellan dem. Det skapas genom att använda "extends" när klassen skapas.

Komposition betyder att en klass innehåller medlemmar skapade av andra klasser. I mitt projekt till exampel så finns det class för "deck of cards" och class för "a hand of cards" som innehåller medlemmar av "Card". Man kan skapa komplex objekt av komposition.

Man använder interface för att reglera vilka metoder en del klass måste ha. Man använda nyckelord "interface" istället för "class" för att definera interface, men man behöver inte definera hur alla metoder ska implementeras inne i interface, utan man gör det i varje class. Alla metoder i en interface måste vara offentliga. En klass som använder en interface ska defineras så: class ClasName implements InterfaceName {} 

Trait är designade för att minska begränsningarna för arv och tillåta oss att fritt återanvända metoder i oberoende klasser. Trait defineras med nyckelord "trait <Traitname> {}" och används i en klass genom kod "use <TraitName>;".

### Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?

Jag har enligt instruktionen skapat classer Card, CardDeck, CardHand för att representera alla objekt som behövs i uppgiften. Sedan bytte jag namnet för CardDeck till CardDeckNoJocker, sedan skapade jag en ny CardDeck som ärver CardDeckNoJocker för att lägga till två Jockers i CardDeck. Sedan var det bara fortsätta implementera alla Router, nödvändiga metoder i varje klass, och landningssidor för alla Router. 

Uppgifter var inte svårt egentligen, men det är lätt hänt att man glömmer lite här och där, så det tar väldigt lång tid att felsöka varje gång. Sedan var det lite krångligt med att hantera hämtade objekt från en klass, ibland kom de som array, och ibland som objekt. Det gäller att man måste vara noga när man funderar på hur return-värden ska vara. 

Det finns möjligt att skapa en klass som ärver Card för att grafiskt representerar alla kort, men just nu löste jag grafiska representationer i CSS istället, och det fungerar bra. Koden för webbklienten och koden för API-delen är helt oberoende av varandra, men de är nästan likadana. Det vore bra om man kan slå ihop en del av dem för att minska total skriven kod.

### Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?

Konceptet MVC(Model-View-Controller)-arkitektur är lätt förstått och det gör det tydligt att vilka tre delar man ska implementera för att lösa varje uppgift. Symfony-ramverk gör det ganska enkelt att implementera en applikation enligt MVC. Man kodar Controller och Model i motsvarande mappar i "src", och View i mappen "templates". När man skapar Model är det viktigt att fundera noga på relationer mellan olika objekt och hur man ska representera dem i classer med deras egenskaper. Att skapa användbara metoder i class ger fördelar till att lösa uppgifter, och man slipper mer kod i Controller och View. Att använda session i Controller möjliggör att applikation blir en helhet, och olika Controller jobbar med samma egenskaper.

### Vilken är din TIL för detta kmom?

Jag fick starkare förståelse av MVC och dess tre delar, samt hur de implementeras i Symfony. Genom "oändliga" felsökningar fick jag mycket erfarenheter att hantera olika möjliga fel, samt hur jag undviker dem i framtiden. Jag fick också använda UTF-8 "bilder" genom att koda in dem i CSS, det är kul att se resultaten i webbsidorna.

        {% endapply %}
        
        
		<h2 id = "kmom03">Kmom03</h2>
		{% apply markdown_to_html %}
### Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?

Jag har gjort likadana innan i andra programmeringskurser, och det gick alltid bra, och det hjälpte alltid problemlösning. Man får mycket bättre struktur om det hela.

### Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?

Det var lite svårt från början för att jag inte visste var jag skulle börja med, men sedan blev det bättre och bättre när det fanns en grundstruktur. Man kan börja spelet med att namnge spelaren. CardDeck visas på sidan för att det blir enklare att se hur hela applikation fungerar, men man kan ta bort det sen om man vill. När antal kort är mindre än 6 kan man inte starta en ny rundan utan det går direkt till game-over. När det inte finns kort i CardDeck att dra, går det också direkt till game-over. Varje gång man vinner, får man en poäng. När spelet är över, kan man se bådas poänger och vem som är vinnare. Jag har försökt göra det mesta i klasserna och lämnade Router och Viewer så enkla som möjligt. Jag är nöjd med min applikation. Man kan göra utseende lite snyggare genom att applicera mer css. 

### Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?

Symfony gör det mycket enklare att utvecka en applikation. Om man följer konceptet MVC, så är det endast tre filer som behöver skrivas vid varje funktionutveckling. Det känns svårt från början, men det blev bara enklare och tydligare när man gjort mer och mer.

### Vilken är din TIL för detta kmom?

Jag har lärt mig att använda olika verktyg för att skriva, reglera, förbättra PHP-kod. Och det är väldigt användbart att göra en script i composer, så att alla verktyg körs samtidgt, snabbt och smidigt. När jag försökte fixa upphittade fel/problem, lärde jag ännu mer om hur man ska skriva php-kod. Det blir användbara erfarenheter i framtiden, då vet jag vad jag ska tänka på när jag skriver php-koden, så slipper jag redigera det koden. Jag har tränat igen att använda arv och komposition, det gick bra och det resultatet känns kraftfullt.
        {% endapply %}
        
        

		<h2 id = "kmom04">Kmom04</h2>
		{% apply markdown_to_html %}
### Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.

Verktyget är väldigt användbar tycker jag. Man kan helt enkelt se vilka rader inkluderas i testkoden.  Om koden går inte att köras, kan man se vilken rad har problem, så det är smidigt att debugga. Det gick bra och snabbt att skriva testkoden. Jag fick använda flera assert, t.ex, assertEquals, assertIsArray, assertGreaterThan, assertNotEquals, osv.

### Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?

Jag lyckades nå 100% kodtäckning för alla klasser i kortspelet.

### Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?

De flesta delar av kod är testbara. Men eftersom kortspelet är dynamiskt, dvs dragna korten är slumpmässiga varje gång, så den där delen är lite svår att testa. Jag fick hårdkoda en del dragna kort i "CardDeck" för att sedan köra testen, och det gick bra till sist. Jag tror inte att man kan göra något för att förbättra den här delen så att den blir mer testbar, eftersom de dragna kort alltid är slupmässiga och spelares poäng är också olika från gång till gång.

### Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.

Jag har inte skrivit om någon del av min kod, eftersom det inte behövdes tyckte jag. Jag fick som sagt hårdkoda en liten del i testkod för att testa spelarens poängsättning och vem som vinner. Jag tycker att det går bra att göra så och testen fungerade bra.

### Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.

Ja, jag tycker att man behöver skriva testbar kod medan man utvecklar en applikation. Eftersom test är också en stor del av hela utvecklingsprocessen. Testbar kod gör att testen blir mycket mer smidig och gör det lättare att skriva testkod med. Det gör också att testen kan nå mycket högre kodtäckning, vilket är viktigt i unittesten.

### Vilken är din TIL för detta kmom?

Jag fick lära mig att skriva testkod för mina klasser i kortspelet, det gick mycket bra och faktiskt snabbt. Jag har inte träffat mycket errors i denna uppgift, men en liten del av felsökning get mig ändå erfarenheter. Jag fick lära känna två yttligare verktyg som är mycket användbara i framtiden. 
        {% endapply %}
        
        
		<h2 id = "kmom05">Kmom05</h2>
		{% apply markdown_to_html %}
### Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?

Jag fick fel med PDO Driver. Det var svårt att säga varför. Jag har testat allt jag kunde googla fram, men inget framsteg i en hel vecka. Det visade bara "No Driver Found". En dag började det fungera direkt efter ett till försök. Jag är osäker på hur jag har rättat till felet. I instruktionen, finns det alternativ-lösning på Delete-Product, men det fungerade inte, eftersom remove-funktion finns inte i det automatiskt genererade BookRepository.php eller ProductRepository.php. Jag vet inte om jag gjort något fel här eller om jag missuppfattat något från instruktionen. Men den orginella lösning fungerar bra.

### Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?

På landningssidan finns det länkar till Skapa-bok, visa-alla-böcker, ta-bort-en-bok, och dessa länkar finns också i navigeringen. Sidan som visar alla böcker är som en hub. När man skapat, raderat, uppdaterat en bok, går det alltid tillbaka till sidan som visar alla böcker. Alla böcker visas i en tabell, och i sista kolumen finns två knappar "updatera bok" och "radera bok". Man kan klicka de för att uppdatera eller radera en bok direkt. Man kan också klicka på bokens namn för att gå in till varje bok och läsa bokens detaljer, där inne finns också dessa två knappar som man kan klicka på för att uppdatera eller radera boken. Jag har även lagt i flash-meddelande. När man skapat, raderat, uppdaterat en bok, får man se ett meddelande som visar vad som är precis gjort, t.ex "Boken med id 1 är raderat". Jag har dock inte laddat upp någon bild, därför visas böckernas bilder inte, utan endast filnamnen som strängar.

### Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?

Det gick bra och det är ganska lätt att jobba med databaser på detta sätt. Man behöver inte skriva mycket kod. Och man kan använda exempelkoden som en mall, och behöver nästan bara fylla i attribut, tabellen/entitets namn i olika metoder. Sedan fungerade det.

### Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?

Man använder data i databasen som en objekt med olika egenskaper. Sedan genom olika metoder når eller uppdatera man data i databasen, precis som hur vi använde objekt. Det tar dock lite tid att uppfatta vad alla rader kod gör. Vi behövde inte använda någon SQL-sats för att ta hand om data i databasen, som vi vanligtvis jobbar med databasen på ett "traditionellt" sätt.

### Vilken är din TIL för detta kmom?

Det största gjädjen idag var att jag äntligen löst problemet "PDO Driver not found" där jag var fastnad i en vecka. Jag fick träna jobba med ORM i CRUD både i övningen och när jag gjorde uppgifterna. Det var roligt och utmaningsfullt att få lära mig ett annat sätt att jobba med databasen.

        {% endapply %}
        
        
		<h2 id = "kmom06">Kmom06</h2>
		{% apply markdown_to_html %}

        {% endapply %}
        
        
		<h2 id = "kmom10">Kmom10</h2>
		{% apply markdown_to_html %}

        {% endapply %}
	</div>
</div>
{% endblock %}
